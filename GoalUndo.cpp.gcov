        -:    0:Source:GoalUndo.cpp
        -:    0:Graph:GoalUndo.gcno
        -:    0:Data:GoalUndo.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "GoalUndo.h"
        -:    2:#include <string>
        -:    3:
        -:    4:/* undoGoal
        -:    5:   When there are existing goals, it removes the most recently added
        -:    6:   one, along with any associated operations
        -:    7:*/
function _ZN8GoalUndo8undoGoalEv called 2 returned 100% blocks executed 100%
        -:    8:void GoalUndo::undoGoal()
        -:    9:{
        2:   10:	if( !goals.empty() )
branch  0 taken 100%
branch  1 taken 0%
        -:   11:	{
        2:   12:		goals.pop();
        2:   13:	}
        2:   14:}
        -:   15:
        -:   16:/* undoOperation
        -:   17:   When there is an existing goal with more than one operation, remove the most
        -:   18:   recently added operation. When there is only one operation in the most
        -:   19:   recently added goal, it removes both the operation and the goal (i.e. goals
        -:   20:   cannot exist without any operations in it).
        -:   21:*/
function _ZN8GoalUndo13undoOperationEv called 3 returned 100% blocks executed 100%
        -:   22:void GoalUndo::undoOperation()
        -:   23:{
        3:   24:	if( !goals.empty() )
branch  0 taken 100%
branch  1 taken 0%
        -:   25:	{
        3:   26:		goals.top().operations.pop_back();
        -:   27:
        3:   28:		if( goals.top().operations.empty() )
branch  0 taken 67%
branch  1 taken 33%
        -:   29:		{
        2:   30:			undoGoal();
        2:   31:		}
        3:   32:	}
        3:   33:}
        -:   34:
        -:   35:/* undoOperation(undoOp)
        -:   36:   Overloaded undoOperation that searches the most recent goal (LIFO order)
        -:   37:   for an operation that matches the argument and removes (only) the first
        -:   38:   match found. If there are no matches, nothing is removed.
        -:   39:*/
function _ZN8GoalUndo13undoOperationENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE called 3 returned 100% blocks executed 100%
        -:   40:void GoalUndo::undoOperation(std::string undoOp)
        -:   41:{
        3:   42:	if( !goals.empty() )
branch  0 taken 100%
branch  1 taken 0%
        -:   43:	{
        3:   44:		std::vector<std::string>::iterator iter;
        -:   45:
       18:   46:		for(iter=goals.top().operations.end()-1; 
branch  0 taken 89%
branch  1 taken 11%
        9:   47:			iter >= goals.top().operations.begin();
        6:   48:			iter-- )
        -:   49:		{
        8:   50:			if( iter->compare(undoOp) == 0 ) //match!
branch  0 taken 25%
branch  1 taken 75%
        -:   51:			{
        2:   52:				goals.top().operations.erase(iter);
        2:   53:				break; //only remove first LIFO match
        -:   54:			}
        6:   55:		}
        3:   56:	}
        3:   57:}
        -:   58:
        -:   59:/* getGoal
        -:   60:   Returns the name of the most recently added goal, or an empty string
        -:   61:   if there are no goals.
        -:   62:*/
function _ZN8GoalUndo7getGoalEv called 7 returned 100% blocks executed 100%
        -:   63:std::string GoalUndo::getGoal()
        -:   64:{
        7:   65:	if( goals.empty() )
branch  0 taken 71%
branch  1 taken 29%
        5:   66:		return "";
        -:   67:	else
        2:   68:		return goals.top().name;
        7:   69:}
        -:   70:
        -:   71:/* getOperations
        -:   72:   Returns the names of all of the operations in the most recently added goal,
        -:   73:   with a space between each operation.
        -:   74:*/
function _ZN8GoalUndo13getOperationsEv called 10 returned 100% blocks executed 79%
        -:   75:std::string GoalUndo::getOperations()
        -:   76:{
       10:   77:	if( goals.empty() )
branch  0 taken 20%
branch  1 taken 80%
        2:   78:		return "";
        -:   79:	else
        -:   80:	{
        8:   81:		std::string allOps = "";
       16:   82:		std::vector <std::string> listOps = goals.top().operations;
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        -:   83:		
        8:   84:		std::vector<std::string>::iterator iter;
       64:   85:		for( iter=goals.top().operations.begin(); 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 71%
branch  3 taken 29%
       56:   86:			 iter < goals.top().operations.end();
branch  0 taken 100%
branch  1 taken 0%
       20:   87:			 iter++ )
        -:   88:		{
       20:   89:			allOps += *iter;
branch  0 taken 100%
branch  1 taken 0%
        -:   90:			//add space between each operation (but not last)
       40:   91:			if( iter < goals.top().operations.cend()-1 ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 60%
branch  3 taken 40%
       24:   92:				allOps += " ";
branch  0 taken 100%
branch  1 taken 0%
       20:   93:		}
        8:   94:		return allOps;
        8:   95:	}
branch  0 taken 0%
branch  1 taken 100%
       10:   96:}
        -:   97:
        -:   98:/* addOperation(newGoal,newOp)
        -:   99:   Adds a new operation (newOp) within a new goal (newGoal). Both have to be
        -:  100:   non-empty strings. If either argument is an empty string, nothing is added.
        -:  101:*/
function _ZN8GoalUndo12addOperationENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_ called 17 returned 100% blocks executed 69%
        -:  102:void GoalUndo::addOperation(std::string newGoal, std::string newOp)
        -:  103:{
       32:  104:	if(!newGoal.empty() && !newOp.empty())
branch  0 taken 88%
branch  1 taken 12%
branch  2 taken 93%
branch  3 taken 7%
        -:  105:	{
       14:  106:		Goal latest;
       14:  107:		latest.name = newGoal;
branch  0 taken 100%
branch  1 taken 0%
       14:  108:		goals.push(latest);
branch  0 taken 100%
branch  1 taken 0%
       42:  109:		addOperation( newOp );
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
       14:  110:	}
       17:  111:}
        -:  112:
        -:  113:/* addOperation(newOp)
        -:  114:   Adds a new operation (newOp) within the most recently added goal. If the
        -:  115:   argument is an empty string, nothing is added. If no goals exist, it
        -:  116:   creates a new goal with the same name as the new operation
        -:  117:*/
function _ZN8GoalUndo12addOperationENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE called 32 returned 100% blocks executed 69%
        -:  118:void GoalUndo::addOperation(std::string newOp)
        -:  119:{
       32:  120:	if(!newOp.empty())
branch  0 taken 97%
branch  1 taken 3%
        -:  121:	{
       31:  122:		if( goals.empty() )
branch  0 taken 6%
branch  1 taken 94%
        -:  123:		{
        6:  124:			addOperation( newOp, newOp );
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        2:  125:		}
        -:  126:		else
        -:  127:		{
       29:  128:			goals.top().operations.push_back(newOp);
        -:  129:		}
       31:  130:	}
       32:  131:}
